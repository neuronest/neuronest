name: 'build_test_push'
description: 'Build, test, and push docker image'
inputs:
  repository_name:
    description: 'Repository name'
    required: true
  docker_repository_name:
    description: 'Docker repository name'
    required: true
  gcp_registry_name:
    description: 'GCP registry name'
    required: true
  dockerhub_username:
    description: 'Docker repository password'
    required: true
  dockerhub_password:
    description: 'Docker repository password'
    required: true
  target:
    description: >
      Docker target in case of a multi-stage build
      (e.g.: "train")
  build_arguments:
    description: >
      Docker build arguments 
      (e.g.: "--build-arg MODEL_PATH=model.pt --build-arg ARTIFACTS_PATH=artifacts")
  shared_repository_name:
    description: 'Shared repository name'
    default: shared
outputs:
  dockerhub_image_name:
    description: 'Built and pushed image name to DockerHub'
    value: ${{ steps.dockerhub_output_step.outputs.dockerhub_image_name }}
  gcp_image_name:
    description: 'Built and pushed image name to GCP'
    value: ${{ steps.gcp_output_step.outputs.gcp_image_name }}
runs:
  using: "composite"
  steps:
    - run: echo "IMAGE_NAME_SUFFIX"="$([[ ! -z '${{ inputs.target }}' ]] && echo '-${{ inputs.target }}' || echo '')" >> $GITHUB_ENV
      shell: bash
    - run: echo "IMAGE_NAME"="${{ inputs.repository_name }}$IMAGE_NAME_SUFFIX" >> $GITHUB_ENV
      shell: bash
    - run: echo "DOCKERHUB_IMAGE_NAME"="${{ inputs.docker_repository_name }}/$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash
    - run: echo "GCP_IMAGE_NAME"="${{ inputs.gcp_registry_name }}/${{ inputs.repository_name }}/$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash
    - run: echo "GCP_REGISTRY"="$(echo ${{ inputs.gcp_registry_name }} | cut -d "/" -f1)" >> $GITHUB_ENV
      shell: bash
    - run: echo "TARGET_ARGUMENTS"="$([[ ! -z '${{ inputs.target }}' ]] && echo '--target ${{ inputs.target }}' || echo '')" >> $GITHUB_ENV
      shell: bash

    - run: echo ${{ inputs.dockerhub_password }} | docker login -u ${{ inputs.dockerhub_username }} --password-stdin
      shell: bash
    - run: gcloud auth configure-docker $GCP_REGISTRY
      shell: bash

    - run: docker pull $DOCKERHUB_IMAGE_NAME:latest || true
      shell: bash

    - run: touch ${{ inputs.repository_name }}/.dockerignore
      shell: bash
    - run: |
        for to_include_line in '**/*' '!${{ inputs.repository_name }}' '!${{ inputs.shared_repository_name }}'
        do
          grep -qxF "$to_include_line" ${{ inputs.repository_name }}/.dockerignore || \
          echo "$to_include_line" >> ${{ inputs.repository_name }}/.dockerignore
        done
      shell: bash
    - run: cp ${{ inputs.repository_name }}/Dockerfile ${{ inputs.repository_name }}/.dockerignore .
      shell: bash

    - run: |
        docker build \
          --cache-from $DOCKERHUB_IMAGE_NAME:latest \
          -t $DOCKERHUB_IMAGE_NAME:$GITHUB_RUN_ID \
          -t $DOCKERHUB_IMAGE_NAME:latest \
          -t $GCP_IMAGE_NAME:$GITHUB_RUN_ID \
          -t $GCP_IMAGE_NAME:latest \
          $TARGET_ARGUMENTS \
          ${{ inputs.build_arguments }} \
          .
      shell: bash

    - run: docker push $DOCKERHUB_IMAGE_NAME:$GITHUB_RUN_ID && docker push $DOCKERHUB_IMAGE_NAME:latest
      shell: bash
    - run: docker push $GCP_IMAGE_NAME:$GITHUB_RUN_ID && docker push $GCP_IMAGE_NAME:latest
      shell: bash

    - id: dockerhub_output_step
      run: echo "dockerhub_image_name=$DOCKERHUB_IMAGE_NAME:$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      shell: bash
    - id: gcp_output_step
      run: echo "gcp_image_name=$GCP_IMAGE_NAME:$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      shell: bash
