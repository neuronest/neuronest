name: 'build_test_push'
description: 'Build, test, and push docker image'
inputs:
  dockerhub_username:
    description: 'Docker repository password'
    required: true
  dockerhub_password:
    description: 'Docker repository password'
    required: true
  target:
    description: >
      Docker target in case of a multi-stage build
      (e.g.: "train")
  build_arguments:
    description: >
      Docker build arguments 
      (e.g.: "--build-arg MODEL_PATH=model.pt --build-arg ARTIFACTS_PATH=artifacts")
  shared_repository_name:
    description: 'Shared repository name'
    default: shared
  maximum_number_images_to_keep:
    description: 'Maximum number of most recent docker images to keep in the registry.tf'
    default: 2
outputs:
  dockerhub_image_name:
    description: 'Built and pushed image name to DockerHub'
    value: ${{ steps.dockerhub_output_step.outputs.dockerhub_image_name }}
  gcp_image_name:
    description: 'Built and pushed image name to GCP'
    value: ${{ steps.gcp_output_step.outputs.gcp_image_name }}
runs:
  using: "composite"
  steps:
    - run: echo "IMAGE_NAME_SUFFIX"="$([[ ! -z '${{ inputs.target }}' ]] && echo '-${{ inputs.target }}' || echo '')" >> $GITHUB_ENV
      shell: bash
    - run: echo "IMAGE_NAME"="$REPOSITORY_NAME$IMAGE_NAME_SUFFIX" >> $GITHUB_ENV
      shell: bash
    - run: echo "DOCKERHUB_IMAGE_NAME"="$DOCKER_REPOSITORY_NAME/$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash
    - run: echo "GCP_IMAGE_NAME"="$GCP_REGISTRY_NAME/$MONO_REPOSITORY_NAME/$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash
    - run: echo "GCP_REGISTRY"="$(echo $GCP_REGISTRY_NAME | cut -d "/" -f1)" >> $GITHUB_ENV
      shell: bash
    - run: echo "TARGET_ARGUMENTS"="$([[ ! -z '${{ inputs.target }}' ]] && echo '--target ${{ inputs.target }}' || echo '')" >> $GITHUB_ENV
      shell: bash
    - run: |
        ACCESS_TOKEN=$(gcloud auth print-access-token)
        echo "::add-mask::$ACCESS_TOKEN"
        echo ACCESS_TOKEN=$ACCESS_TOKEN >> $GITHUB_ENV
      shell: bash

    - run: echo ${{ inputs.dockerhub_password }} | docker login -u ${{ inputs.dockerhub_username }} --password-stdin
      shell: bash
#    - run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ vars.DOCKERHUB_USERNAME }} --password-stdin
#      shell: bash
    - run: gcloud auth configure-docker $GCP_REGISTRY
      shell: bash

    - run: docker pull $DOCKERHUB_IMAGE_NAME:latest || true
      shell: bash

    - run: touch $REPOSITORY_NAME/.dockerignore
      shell: bash
    - run: |
        for to_include_line in '**/*' '!${{ env.REPOSITORY_NAME }}' '!${{ inputs.shared_repository_name }}'
        do
          grep -qxF "$to_include_line" $REPOSITORY_NAME/.dockerignore || \
          echo "$to_include_line" >> $REPOSITORY_NAME/.dockerignore
        done
      shell: bash
    - run: cp $REPOSITORY_NAME/Dockerfile $REPOSITORY_NAME/.dockerignore .
      shell: bash

    - run: |
        docker build \
        --cache-from $DOCKERHUB_IMAGE_NAME:latest \
        -t $DOCKERHUB_IMAGE_NAME:$GITHUB_RUN_ID \
        -t $DOCKERHUB_IMAGE_NAME:latest \
        -t $GCP_IMAGE_NAME:$GITHUB_RUN_ID \
        -t $GCP_IMAGE_NAME:latest \
        $TARGET_ARGUMENTS \
        ${{ inputs.build_arguments }} \
        .
      shell: bash

    - run: docker push $DOCKERHUB_IMAGE_NAME:$GITHUB_RUN_ID && docker push $DOCKERHUB_IMAGE_NAME:latest
      shell: bash

    - name: Run linters and tests
      uses: ./.github/actions/run_linters_tests
      with:
        image_name: ${{ env.DOCKERHUB_IMAGE_NAME }}:$GITHUB_RUN_ID

    - run: docker push $GCP_IMAGE_NAME:$GITHUB_RUN_ID && docker push $GCP_IMAGE_NAME:latest
      shell: bash

    - name: Clean old docker images
      uses: docker://europe-docker.pkg.dev/gcr-cleaner/gcr-cleaner/gcr-cleaner-cli
      with:
        args: >-
          -token=${{ env.ACCESS_TOKEN }}
          -repo=${{ env.GCP_IMAGE_NAME }}
          -tag-filter-all="\d+"
          -keep=${{ inputs.maximum_number_images_to_keep }}

    - id: dockerhub_output_step
      run: echo "dockerhub_image_name=$DOCKERHUB_IMAGE_NAME:$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      shell: bash
    - id: gcp_output_step
      run: echo "gcp_image_name=$GCP_IMAGE_NAME:$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      shell: bash
