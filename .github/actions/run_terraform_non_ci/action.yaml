name: My Action
description: 'A YAML mapping or dictionary of keyword arguments'
inputs:
  terraform_disable_bools:
    required: true
    description: 'A YAML mapping or dictionary of keyword arguments'
runs:
  using: "composite"
  steps:
    - run: |
        # if inputs.terraform_disable_bools is not empty
        if [ -n "${{ inputs.terraform_disable_bools }}" ]; then
          for terraform_disable_bool in "${{ inputs.terraform_disable_bools }}"; do
              export ${terraform_disable_bool^^}=0
              echo "${terraform_disable_bool^^}=0" >> $GITHUB_ENV
        
              export TF_VAR_${terraform_disable_bool,,}=0
              echo "TF_VAR_${terraform_disable_bool,,}=0" >> $GITHUB_ENV
          done
        fi
      shell: bash
    - run: |
        # create project
        gcloud projects create ${{ env.PROJECT_ID }} --organization ${{ env.ORGANIZATION_ID }} || true
        gcloud config set project ${{ env.PROJECT_ID }}
        yes | gcloud beta billing projects link ${{ env.PROJECT_ID }} --billing-account ${{ env.BILLING_ACCOUNT }}
      shell: bash
    - run: |
        default_owners_of_projects=${{ env.DEFAULT_OWNERS_OF_PROJECTS }}
        for default_owner_of_project in ${default_owners_of_projects//,/ }; do
          echo $default_owner_of_project
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} --member=user:$default_owner_of_project --role=roles/owner
        done
      shell: bash
    - run: |
        # create state bucket
        gsutil ls -b gs://${{ env.STATE_BUCKET}} || gsutil mb -p ${{ env.PROJECT_ID }} -c STANDARD -l ${{ env.REGION }} -b on gs://${{ env.STATE_BUCKET}}
        
        # create the terraform state
        terraform init -input=false -backend-config="bucket=${{ env.STATE_BUCKET}}"
        
        # import in the terraform state
        terraform import google_project.project ${{ env.PROJECT_ID }}
      shell: bash