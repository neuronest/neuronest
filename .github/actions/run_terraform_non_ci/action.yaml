name: My Action
description: 'A YAML mapping or dictionary of keyword arguments'
inputs:
  terraform_disable_bools:
    required: true
    description: 'A YAML mapping or dictionary of keyword arguments'
  google_github_actions_auth_credentials_json:
    description: 'The Google Cloud JSON service account key to use for authentication'
    required: true
  repository_name:
    description: 'Repository name'
    required: true
runs:
  using: "composite"
  steps:
#    - run: |
#        # if inputs.terraform_disable_bools is not empty
#        if [ -n "${{ inputs.terraform_disable_bools }}" ]; then
#          for terraform_disable_bool in "${{ inputs.terraform_disable_bools }}"; do
#              export ${terraform_disable_bool^^}=0
#              echo "${terraform_disable_bool^^}=0" >> $GITHUB_ENV
#
#              export TF_VAR_${terraform_disable_bool,,}=0
#              echo "TF_VAR_${terraform_disable_bool,,}=0" >> $GITHUB_ENV
#          done
#        fi
#      shell: bash
    - run: |
        gcloud projects create ${{ env.PROJECT_ID }} --organization ${{ env.ORGANIZATION_ID }} || true
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud beta billing projects link ${{ env.PROJECT_ID }} --billing-account ${{ env.BILLING_ACCOUNT }}
        
        default_owners_of_projects=${{ env.DEFAULT_OWNERS_OF_PROJECTS }}
        for default_owner_of_project in ${default_owners_of_projects//,/ }; do
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} --member=user:$default_owner_of_project --role=roles/owner
        done
      shell: bash

    - uses: ./.github/actions/set_up_terraform
      with:
        google_github_actions_auth_credentials_json: ${{ inputs.google_github_actions_auth_credentials_json }}

    - run: |
        # create state bucket
        gsutil ls -b gs://${{ env.STATE_BUCKET}} || gsutil mb -p ${{ env.PROJECT_ID }} -c STANDARD -l ${{ env.REGION }} -b on gs://${{ env.STATE_BUCKET}}
        
        # create the terraform state
        terraform init -input=false -backend-config="bucket=${{ env.STATE_BUCKET}}"
        
        # import the project in the terraform state
        terraform import google_project.project ${{ env.PROJECT_ID }}
        
        # ce sont bien  les -var options du plan et apply qui prennent le pas sur les variables d'env
        # du type TF_VAR etc donc c'est là-dessus qu'il faut agir
        # le but sera simplement d'avoir une seule action terraform_run avec la possibilité
        # de passer certain vars et de l'appeler deux fois au cours de la CI
      working-directory: ${{ inputs.repository_name }}/iac
      shell: bash

    - run: |
        # run terraform init 
        terraform init -input=false -backend-config="bucket=${{ env.STATE_BUCKET }}"
        
        # set up terraform -var arguments
        terraform_vars=""
        # if inputs.terraform_disable_bools is not empty
        if [ -n "${{ inputs.terraform_disable_bools }}" ]; then
          for terraform_disable_bool in "${{ inputs.terraform_disable_bools }}"; do
              terraform_vars="$terraform_vars -var $terraform_disable_bool"
          done
        fi
        echo $terraform_vars
        
        # run terraform plan
        bash -c "terraform plan $terraform_vars -input=false -out=tfplan"
        
        # run terraform apply
        bash -c "terraform apply $terraform_vars -input=false -auto-approve tfplan"
      shell: bash



