name: 'run_terraform'
description: 'Create the base infrastructure components, initialize and apply terraform'
inputs:
  targets:
    description: 'Terraform targets to build'
    required: true
  workspace:
    description: 'Terraform workspace to use, can be either "base" or "$REPOSITORY_NAME"'
    required: true
  image_name:
    description: 'Docker image name built'
    required: false
    default: ""  # can only be empty for partial terraform runs, aka runs that don't use "image_name"
  vars:
    description: 'Variables usually named -var found in the terraform plan and terraform apply commands'
    required: false
    default: ""
  lock_timeout:
    description: 'Maximum number of seconds to wait during a terraform lock before giving up'
    required: false
    default: "180s"

runs:
  using: "composite"
  steps:
    - run: echo "TF_VAR_image_name"="${{ inputs.image_name }}" >> $GITHUB_ENV
      shell: bash

    - run: |
        if [[ ${{ inputs.workspace }} != "base" && ${{ inputs.workspace }} != "$REPOSITORY_NAME" ]]; then
          echo "Incorrect workspace input: expected $REPOSITORY_NAME or base, got ${{ inputs.workspace }}"
          exit 1
        fi
      shell: bash

    - run: |
        gcloud projects create $PROJECT_ID --set-as-default --organization $ORGANIZATION_ID 2>/dev/null || true
        gcloud beta billing projects link $PROJECT_ID --billing-account $BILLING_ACCOUNT
      shell: bash

    - id: add_iam_for_default_owners
      uses: nick-fields/retry@v2
      with:
        timeout_seconds: 30
        max_attempts: 3
        command: |
          for default_projects_owner in ${DEFAULT_PROJECTS_OWNERS//,/ }; do
            gcloud projects add-iam-policy-binding $PROJECT_ID --member=user:$default_projects_owner --role=roles/owner
          done

    - uses: ./.github/actions/set_up_terraform

    - run: |
        # create state bucket
        gsutil ls -b gs://$STATE_BUCKET || gsutil mb -p $PROJECT_ID -c STANDARD -l $REGION -b on gs://$STATE_BUCKET
      shell: bash

    - run: |
        # run terraform init and create the terraform state locally
        terraform init -input=false -backend-config="bucket=$STATE_BUCKET"

        workspace=$REPOSITORY_NAME
        if [ -n "${{ inputs.workspace }}" ]; then
          workspace=${{ inputs.workspace }}
        fi
        terraform workspace select $workspace || terraform workspace new $workspace

        # import the project in the terraform state
        terraform import google_project.project $PROJECT_ID 2>/dev/null || true

    - id: terraform_plan_and_apply
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 5
        max_attempts: 3
        command: |
          # set up terraform -var arguments
          terraform_vars=""
          # if inputs.vars is not empty
          if [ -n "${{ inputs.vars }}" ]; then
            for input_var in "${{ inputs.vars }}"; do
                terraform_vars="$terraform_vars -var $input_var"
            done
          fi

          # set up terraform -target arguments
          terraform_targets=""
          # if inputs.targets is not empty
          if [ -n "${{ inputs.targets }}" ]; then
            for input_target in "${{ inputs.targets }}"; do
                terraform_targets="$terraform_targets -target $input_target"
            done
          fi
          
          cd ${{ env.REPOSITORY_NAME }}/iac
  
          # run terraform plan
          bash -c "terraform plan $terraform_vars $terraform_targets -lock-timeout=${{ inputs.lock_timeout }} -input=false -out=tfplan"
  
          # run terraform apply
          bash -c "terraform apply -lock-timeout=${{ inputs.lock_timeout }} -input=false -auto-approve tfplan"
