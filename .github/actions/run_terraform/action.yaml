name: 'run_terraform'
description: 'Create the base infrastructure components, initialize and apply terraform'
inputs:
  targets:
    description: 'Terraform targets to build'
    required: true
  workspace:
    description: 'Terraform workspace to use, can be either "base" or "$REPOSITORY_NAME"'
    required: true
  image_name:
    description: 'Docker image name built'
    required: false
    default: ""  # can only be empty for partial terraform runs, aka runs that don't use "image_name"
  min_terraform_retry_wait_seconds:
    description: 'Terraform maximum wait time for retry after failure'
    required: false
    default: "60"
  max_terraform_retry_wait_seconds:
    description: 'Terraform maximum wait time for retry after failure'
    required: false
    default: "120"
outputs:
  base_project_builder_sa_key:
    description: 'The base64 encoded key of the IAC service account of the shared repository'
    value: ${{ steps.get_base_project_builder_sa_key.outputs.value }}

runs:
  using: "composite"
  steps:
    - run: echo "TF_VAR_image_name"="${{ inputs.image_name }}" >> $GITHUB_ENV
      shell: bash

    - uses: ./.github/actions/set_up_terraform

    - run: |
        if [[ ${{ inputs.workspace }} != "base" && ${{ inputs.workspace }} != "$REPOSITORY_NAME" ]]; then
          echo "Incorrect workspace input: expected $REPOSITORY_NAME or base, got ${{ inputs.workspace }}"
          exit 1
        fi
      shell: bash

    - id: set_terraform_retry_wait_seconds
      # we wait a random number of seconds before retrying to prevent jobs targeting
      # the same resources, like base, from retrying at the same time
      run: |
        max_wait_seconds=${{ inputs.max_terraform_retry_wait_seconds }}
        min_wait_seconds=${{ inputs.min_terraform_retry_wait_seconds }}
        echo "value=$((min_wait_seconds + RANDOM % (max_wait_seconds - min_wait_seconds + 1)))" >> $GITHUB_OUTPUT
      shell: bash

    - id: terraform_with_retry
      uses: nick-fields/retry@v2.8.2
      with:
        # timeout_seconds: 1200
        timeout_seconds: 120
        max_attempts: 5
        retry_wait_seconds: ${{ steps.set_terraform_retry_wait_seconds.outputs.value }}
        command: |
          source ./.github/functions/initialize_terraform.sh
          initialize_terraform ${{ env.REPOSITORY_NAME }} ${{ inputs.workspace }} $STATE_BUCKET

          # import the project in the terraform state
          terraform import google_project.project $PROJECT_ID 2>/dev/null || true
  
          # set up terraform -target arguments
          terraform_targets=""
          # if inputs.targets is not empty
          if [ -n "${{ inputs.targets }}" ]; then
            for input_target in "${{ inputs.targets }}"; do
                terraform_targets="$terraform_targets -target $input_target"
            done
          fi

          # run terraform plan
          bash -c "terraform plan $terraform_targets -input=false -out=tfplan"
  
          # run terraform apply
          bash -c "terraform apply -input=false -auto-approve tfplan"
          terraform_exit_status=$?
          
          # force script to terminate on terraform exit code to account for bug 
          # where last command dictates that an error has occurred or not: https://github.com/nick-fields/retry/issues/53
          exit $terraform_exit_status

    - id: get_base_project_builder_sa_key
      uses: ./.github/actions/get_terraform_output
      with:
        workspace: ${{ inputs.workspace }}
        terraform_output_name: base_project_builder_sa_key
    # the "not success" condition is better because it also involves jobs that have
    # failed because they were interrupted because they took too long or because a
    # terraform variable was missing and it was waiting indefinitely for example
    - id: release_terraform_lock
      if: ${{ !success() && steps.terraform_with_retry.conclusion != 'success' }}
      run: gcloud storage rm gs://$STATE_BUCKET/terraform/state/${{ inputs.workspace }}.tflock || true
      shell: bash
