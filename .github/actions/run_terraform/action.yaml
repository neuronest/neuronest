name: 'run_terraform'
description: 'Create the base infrastructure components, initialize and apply terraform'
inputs:
  targets:
    description: 'Terraform targets to build'
    required: true
  workspace:
    description: 'Terraform workspace to use, can be either "base" or "$REPOSITORY_NAME"'
    required: true
  image_name:
    description: 'Docker image name built'
    required: false
    default: ""  # can only be empty for partial terraform runs, aka runs that don't use "image_name"
  vars:
    description: 'Variables usually named -var found in the terraform plan and terraform apply commands'
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - run: echo "TF_VAR_image_name"="${{ inputs.image_name }}" >> $GITHUB_ENV
      shell: bash

    - uses: ./.github/actions/set_up_terraform

    - run: |
        if [[ ${{ inputs.workspace }} != "base" && ${{ inputs.workspace }} != "$REPOSITORY_NAME" ]]; then
          echo "Incorrect workspace input: expected $REPOSITORY_NAME or base, got ${{ inputs.workspace }}"
          exit 1
        fi
      shell: bash

    - run: |
        gcloud projects create $PROJECT_ID --set-as-default --organization $ORGANIZATION_ID 2>/dev/null || true
        gcloud beta billing projects link $PROJECT_ID --billing-account $BILLING_ACCOUNT
      shell: bash

    - run: |
        # create state bucket
        gsutil ls -b gs://$STATE_BUCKET || gsutil mb -p $PROJECT_ID -c STANDARD -l $REGION -b on gs://$STATE_BUCKET
      shell: bash

    - id: add_iam_with_retry
      uses: nick-fields/retry@v2.8.2
      with:
        timeout_seconds: 30
        max_attempts: 3
        command: |
          for default_projects_owner in ${DEFAULT_PROJECTS_OWNERS//,/ }; do
            gcloud projects add-iam-policy-binding $PROJECT_ID --member=user:$default_projects_owner --role=roles/owner
          done

    - id: terraform_with_retry
      uses: nick-fields/retry@v2.8.2
      with:
        timeout_seconds: 1200
        max_attempts: 5
        retry_wait_seconds: 120
        command: |
          cd ${{ env.REPOSITORY_NAME }}/iac
          
          # run terraform init and create the terraform state locally
          terraform init -input=false -backend-config="bucket=$STATE_BUCKET"
  
          terraform workspace select ${{ inputs.workspace }} || terraform workspace new ${{ inputs.workspace }}
  
          # import the project in the terraform state
          terraform import google_project.project $PROJECT_ID 2>/dev/null || true
          
          # set up terraform -var arguments
          terraform_vars=""
          # if inputs.vars is not empty
          if [ -n "${{ inputs.vars }}" ]; then
            for input_var in "${{ inputs.vars }}"; do
                terraform_vars="$terraform_vars -var $input_var"
            done
          fi
  
          # set up terraform -target arguments
          terraform_targets=""
          # if inputs.targets is not empty
          if [ -n "${{ inputs.targets }}" ]; then
            for input_target in "${{ inputs.targets }}"; do
                terraform_targets="$terraform_targets -target $input_target"
            done
          fi
  
          # run terraform plan
          bash -c "terraform plan $terraform_vars $terraform_targets -input=false -out=tfplan"
  
          # run terraform apply
          bash -c "terraform apply -input=false -auto-approve tfplan"

          # add the project builder key as an environment variable
          echo `terraform output base_project_builder_sa_key | tr -d '"'`
          base_project_builder_sa_key_one="ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsCiAgInByb2plY3RfaWQiOiAicGVvcGxlLWNvdW50aW5nLTIzMDQxMSIsCiAgInByaXZhdGVfa2V5X2lkIjogIjZlNWI4Y2Q5YTZkNDgyY2Q3MDVlYjY3OWJhYWZmMTI3ODcyZTQ1ZmMiLAogICJwcml2YXRlX2tleSI6ICItLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cbk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRFM0dTlwWTkzRmR0d25cbmdDT0ZHKzhWcHZLTjN0dFg0M0J0RkMyRXNqMm5Wb1NSTkxtcG5NVkh5enAwV0Z5YUdwWVZzN0w0N05qc2tzWndcbjJUV1Vnbk1VdjkyUUk1cmpKMWsvdmdDOHJ6NVVrUWVyalM2N3RjZDZzVWd6NUNvdGhMcFcyQkh6UzN6Y2ljR0dcbnhRVWpNcm9ZSFl4WXBxaURZR1VaRnZYRlgra0RnQ1NPU29DMkdMem9GYTlBWlY5amhNVmtRWXpHd2lwYWYyc2RcblFPR0VRbDQzSVozb3FVSy9KUDVYdlVxa0thWnFRYjhiYjVoL0E5R0wyTDgxa2hEak80QytQbmJlSWJ2ZFg4UXZcbm40UzV6M0ZodWM2VUo2dHhtVVpQY0IzdVh6c3dDTnE4aGRtN1ZoNTVDWmVNMUU4a1Jna1RuT3Jab2VBRFlYcHNcbkQzT2pSbmtCQWdNQkFBRUNnZ0VBS0FWWHJIOCtqdE1hQUNnTjlaeWh3SkRzZnBhQXQxcnJFdFJOdUIxUVhJR3JcbmlsZ0FkUXNTbUdlZHlnY2IyY1g2WGhkNmUwbU5lRVg1Z1dDRFRkSDh6MzhDNS9BTjNKWnkxa2t6WUJ0OHYzVS9cbmlLTzBMdnpXSkxkZ3JiSmErOFR3elByWDJ6MWo3b0Y1RjkrcmRDelVDckFPMnFNVUgweUxteG1Ubmpldm81RlZcbmNZVHR5UFJQWmpmMWc1ZzFGZWVsRmpsdXlSV05Sc21SR0ZOZVoxOUV4UWdVU09OYWM0c0Y3R3pKUGpDSWJFamZcblZEVEx4RDlmNHRQUmtuVnI2RlhUSi9kdGdrSmUvQUh6aHd1RUJKWEs5WFlwMTY5VDNDd1M5K05QSjExNU9oQ2FcbmhObjFNd3cwWW1hUlN1MyttMzdXOHJDRG5TRWlkNittZEJlVFRBTTduUUtCZ1FEMFZEZS9GYU96MDFhT2tsRnhcbnhWNS9wUi9kS0xaM1EySkNXSDdrV2dWWDd1dFNLWHo0dW1iSGdVbjdSclplVlNGL3habnB0QWtiNmQxemZPeEVcblk2dzF3SE9NayszbmNKWUJOVlNCS2grY1A4eDYvZUMyUU4yNWVzbXJLa1VidVk2SzR3OU1nTUdXbHV2YmE2VGdcbnp4NHNXd1hCWEQ4R25mN3JJNnZlR21idVBRS0JnUURjOWNQVlo1VmVwOWZXbXNsbHZCQUlSdlhuc2tCbjh2SnpcbmhqaWh0QUpqMTdKSjJwRUs3WGdOTFppT3AzVUhZZkVuMG9hallqa0VnNkhuaXFvbENEMFJYMldsVGw0dmJTVC9cbkcxbFZYaDJreVk5d2o2bEozc1FaZjNjc05Uc0VzREVZWk0xcTNCV0lkbXVHalNEdDVKT0hrOWhKWUNSME9PMS9cbjJ4Q3hNN1dHRlFLQmdIVHRxUkFseHdaVWFlUXBXaGpjbi9EdWtXVkNDckRnNnJGZHNMeVA2R2JBekpXeGpVRnJcbjA2dyt6NjBWbGtsbTdIVTlsLzhrVGdleDBHMW9wNW5ES2JNL3V3elg3czhJTG9HOWlBZVlwVEFkeURwRUxicUxcbktKR1BsZHY0aXNKTjkwMjRoS1hVS05Gc3dNdHRwS2FCK0txNWxQT0l0aER3cEFMY08zQTdxbTd4QW9HQUVqMXZcbmR4UmY3anBveE54dU42bTRvUlpLZ2wvaWxUSW05WVprOG1STHRqWStEMzZ0Ym50LzU0YVdDMkNqZG9LTlI3NUhcblF3Rit0M0t1VU5EUGp0TUpSMy9hZ2pUZjdZWlRBWVFlY2IrZEx0YzhzZ3dKNjRFcUt2aXN1OGVCSWJmeHRaUE1cbnFUK1Z2M2dYRkRwZU40VWc4Sll4eW96WE5ZamxnaUp4VkU5eWNxa0NnWUVBcEE3WHlNcDlvYmpqK2VPRHJwR3JcbmQ2cy9vTVlNMkZvNnB4Z1A2cVI0cTVuallFNGRxNHpxY3dybTBkaTFBcWg5dzRrdEdicWJoblNFeENuZlVyYzNcbng5WmE3eEtGeEZ6bDVudlBIR0I2WFVLbGJ0NWlwN0lYL0VHQzRJUFRtOUVYN2RkWklUUmV2c21qdWtLRCthTWRcbi91bW5UWXliTWMwY1E0dkFGdUd0RlY4PVxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLVxuIiwKICAiY2xpZW50X2VtYWlsIjogInBlb3BsZS1jb3VudGluZy0yMzA0MTEtYnVpbGRlckBwZW9wbGUtY291bnRpbmctMjMwNDExLmlhbS5nc2VydmljZWFjY291bnQuY29tIiwKICAiY2xpZW50X2lkIjogIjExNjUzMDUwNTkwOTU4NDQ3MTA3NCIsCiAgImF1dGhfdXJpIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoIiwKICAidG9rZW5fdXJpIjogImh0dHBzOi8vb2F1dGgyLmdvb2dsZWFwaXMuY29tL3Rva2VuIiwKICAiYXV0aF9wcm92aWRlcl94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS9jZXJ0cyIsCiAgImNsaWVudF94NTA5X2NlcnRfdXJsIjogImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3JvYm90L3YxL21ldGFkYXRhL3g1MDkvcGVvcGxlLWNvdW50aW5nLTIzMDQxMS1idWlsZGVyJTQwcGVvcGxlLWNvdW50aW5nLTIzMDQxMS5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbSIKfQo="
          base_project_builder_sa_key_two=$(terraform output base_project_builder_sa_key | tr -d '"')
          echo test${base_project_builder_sa_key_one}test
          echo test${base_project_builder_sa_key_two}test
          # remove quotes around key
          
          if [ $base_project_builder_sa_key_one = $base_project_builder_sa_key_two ]; then
            echo strings are equal
          else
            echo strings are not equal
          fi

          if [ ${{ inputs.workspace }} = "base" ]; then
            base_project_builder_sa_key=$(terraform output base_project_builder_sa_key | tr -d '"')
          else
            base_project_builder_sa_key=""
          fi
          echo "BASE_PROJECT_BUILDER_SA_KEY=$base_project_builder_sa_key" >> $GITHUB_ENV

    - id: release_terraform_lock
      if: ${{ failure() && steps.terraform_with_retry.conclusion == 'failure' }}
      run: gcloud storage rm gs://$STATE_BUCKET/terraform/state/${{ inputs.workspace }}.tflock || true
      shell: bash
