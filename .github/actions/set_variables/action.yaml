name: 'set_variables'
description: 'Configure environment variables for a workflow'
inputs:
  repository_name:
    description: 'Whether to also create corresponding terraform variables'
    required: true
    default: 'true'
  set_up_terraform_variables:
    description: 'Whether to also create corresponding terraform variables'
    required: false
    default: 'true'
  variable_prefix_to_filter_on:
    description: 'Whether to also create corresponding terraform variables'
    required: false
    default: ''
  discard_shared_variables:
    description: 'Whether to also create corresponding terraform variables'
    required: false
    default: 'false'
outputs:
  created_env_file_path:
    description: 'base project builder service account key'
    value: ${{ steps.set_created_env_file_path.outputs.value }}
runs:
  using: "composite"
  steps:
    - uses: ./.github/actions/set_up_python
    - id: set_created_env_file_path
      run: |
        # temporary file that will be generated
        PREPROCESSED_VARIABLES_PATH=/tmp/variables.env
        echo "PREPROCESSED_VARIABLES_PATH=$PREPROCESSED_VARIABLES_PATH" >> $GITHUB_ENV
        echo "value=$PREPROCESSED_VARIABLES_PATH" >> $GITHUB_OUTPUT
        echo "value=$PREPROCESSED_VARIABLES_PATH"
      shell: bash
    - run: echo "set_created_env_file_path ${{ steps.set_created_env_file_path.outputs.value }}"
      shell: bash
    - run: |
        python3 .github/actions/set_variables/create_env_file.py \
          --repository_name ${{ inputs.repository_name }} \
          --environment_variables_file_path $PREPROCESSED_VARIABLES_PATH \
          --add_terraform_variables ${{ inputs.set_up_terraform_variables }} \
          --variable_prefix_to_filter_on "${{ inputs.variable_prefix_to_filter_on }}" \
          --discard_shared_variables ${{ inputs.discard_shared_variables }}
      shell: bash

    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.CALLER_WORKFLOW_ENV_FILE_ARTIFACT_NAME }}
        path: /tmp
      if: ${{ env.CALLER_WORKFLOW_ENV_FILE_ARTIFACT_NAME != '' }}

    - run: |
        repository_name=${{ inputs.repository_name }}
        caller_workflow_env_file_artifact_path=/tmp/${{ env.CALLER_WORKFLOW_ENV_FILE_ARTIFACT_NAME }}
        while IFS= read -r line; do
          # Extract the variable name and value
          var_name=$(echo "$line" | cut -d'=' -f1)
          var_value=$(echo "$line" | cut -d'=' -f2)

          # remove the left part of the prefix which represents the variable definition
          # context from the perspective of the workflow caller, and replace dash with
          # underscore in the repository name
          # example: people_counting_tracker_object_detection_cloud_run_cpu becomes
          # cloud_run_cpu in repository "object-detection"
          if [[ $var_name == TF_VAR_* ]]; then
            var_name_with_correct_context_prefix=TF_VAR_$(echo "$var_name" | sed "s/.*${repository_name//-/_}_//")
          else
            # uppercase repository name
            repository_name=${repository_name^^}
            var_name_with_correct_context_prefix=$(echo "$var_name" | sed "s/.*${repository_name^^//-/_}_//")
          fi
          
          echo "$var_name_with_correct_context_prefix=$var_value" >> $PREPROCESSED_VARIABLES_PATH

        done < $caller_workflow_env_file_artifact_path
      if: ${{ env.CALLER_WORKFLOW_ENV_FILE_ARTIFACT_NAME != '' }}
      shell: bash

    - uses: cardinalby/export-env-action@v2
      with:
        envFile: ${{ env.PREPROCESSED_VARIABLES_PATH }}
        expand: 'true'
