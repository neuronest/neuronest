name: abstract_online_prediction_model

on:
  workflow_call:
    inputs:
      build:
        required: false
        type: string
        default: 'true'
      deploy:
        required: false
        type: string
        default: 'true'
      do_post_deployment:
        required: false
        type: string
        default: 'true'
      env_file_artifact_name:
        required: false
        type: string
        default: ''
      base_project_builder_sa_key:
        required: false
        type: string
        default: ""
      dockerhub_training_image_name:
        required: false
        type: string
        default: ""
      gcp_training_image_name:
        required: false
        type: string
        default: ""
      model_instantiator_url:
        required: false
        type: string
        default: ""
      online_prediction_model_repository:
        required: true
        type: string
    outputs:
      gcp_training_image_name:
        description: "The gcp training image name"
        value: ${{ jobs.get_training_images.outputs.gcp_image }}
      dockerhub_training_image_name:
        description: "The dockerhub training image name"
        value: ${{ jobs.get_training_images.outputs.dockerhub_image }}
      base_project_builder_sa_key:
        description: 'The base64 encoded key of the IAC service account of the shared repository'
        value: ${{ jobs.get_base_project_builder_sa_key.outputs.value }}

env:
  REPOSITORY_NAME: ${{ inputs.online_prediction_model_repository }}
  DOCKERFILE_PATH: shared/core/dockerfiles/abstract/online_prediction_model.Dockerfile

jobs:
  run_base_terraform:
    runs-on: neuronest-runner-set
    # If the workflow isn't called, inputs are blank and job should run
    if: ${{ (inputs.deploy == 'true' || inputs.deploy == '') }}
    container: google/cloud-sdk
    outputs:
      base_project_builder_sa_key: ${{ steps.run_base_terraform.outputs.base_project_builder_sa_key }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables_gcloud_auth
        with:
          credentials_json: ${{ secrets.NEURONEST_INFRASTRUCTURE_BUILDER_SERVICE_ACCOUNT }}
          env_file_artifact_name: ${{ inputs.env_file_artifact_name }}
      - id: run_base_terraform
        uses: ./.github/actions/run_base_terraform

  build_test_push_training_image:
    name: build_test_push_training_image
    runs-on: neuronest-runner-set
    needs: run_base_terraform
    # the documentation specifies that if only one job is skipped
    # in a series of jobs dependencies defined by the "needs: ", all subsequent jobs are
    # skipped. To allow jobs to run despite a skip in the series,
    # we use the !failure() condition
    # see: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    if: ${{ (inputs.build == 'true' || inputs.build == '') && !failure() }}
    outputs:
      dockerhub_training_image_name: ${{ steps.build_test_push.outputs.dockerhub_image_name }}
      gcp_training_image_name: ${{ steps.build_test_push.outputs.gcp_image_name }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables
        with:
          env_file_artifact_name: ${{ inputs.env_file_artifact_name }}
          as_root: true
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ secrets.NEURONEST_INFRASTRUCTURE_BUILDER_SERVICE_ACCOUNT }}
      - id: build_test_push
        uses: ./.github/actions/build_test_push
        with:
          dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          target: training
          # todo: consider whether the default behavior should be to pass the arguments
          # REPOSITORY_NAME and PACKAGE_NAME during all docker builds. It would make
          # things less verbose, with almost only advantages: either the dockerfile
          # uses them, or docker ignores them
          build_arguments: --build-arg REPOSITORY_NAME=${{ env.REPOSITORY_NAME }} --build-arg PACKAGE_NAME=${{ env.PACKAGE_NAME }} --build-arg MODEL_NAME=${{ env.MODEL_NAME }}
          dockerfile_path: ${{ env.DOCKERFILE_PATH }}

  get_training_images:
    runs-on: neuronest-runner-set
    needs: build_test_push_training_image
    if: ${{ !failure() }}
    outputs:
      dockerhub_image: ${{ steps.get_dockerhub_and_gcp_training_images.outputs.dockerhub_image }}
      gcp_image: ${{ steps.get_dockerhub_and_gcp_training_images.outputs.gcp_image }}
    steps:
      - id: get_dockerhub_and_gcp_training_images
        run: |
          job_dockerhub_training_image_name=${{ needs.build_test_push_training_image.outputs.dockerhub_training_image_name }}
          input_dockerhub_training_image_name=${{ inputs.dockerhub_training_image_name }}
          dockerhub_training_image_name=${job_dockerhub_training_image_name:-$input_dockerhub_training_image_name}
          echo "dockerhub_image=$dockerhub_training_image_name" | tee -a $GITHUB_OUTPUT
          
          job_gcp_training_image_name=${{ needs.build_test_push_training_image.outputs.gcp_training_image_name }}
          input_gcp_training_image_name=${{ inputs.gcp_training_image_name }}
          gcp_training_image_name=${job_gcp_training_image_name:-$input_gcp_training_image_name}
          echo "gcp_image=$gcp_training_image_name" | tee -a $GITHUB_OUTPUT

  get_base_project_builder_sa_key:
    runs-on: neuronest-runner-set
    needs: run_base_terraform
    if: ${{ !failure() }}
    outputs:
      value: ${{ steps.get_base_project_builder_sa_key.outputs.base_project_builder_sa_key }}
    steps:
      - id: get_base_project_builder_sa_key
        run: |
          job_base_project_builder_sa_key=${{ needs.deploy_with_training_image.outputs.base_project_builder_sa_key }}
          input_base_project_builder_sa_key=${{ inputs.base_project_builder_sa_key }}
          # take the one that is not empty
          base_project_builder_sa_key=${job_base_project_builder_sa_key:-$input_base_project_builder_sa_key}
          echo "base_project_builder_sa_key=$base_project_builder_sa_key" | tee -a $GITHUB_OUTPUT

  deploy_with_training_image:
    name: deploy_with_training_image
    runs-on: neuronest-runner-set
    needs:
      - get_base_project_builder_sa_key
      - get_training_images
    # If the workflow isn't called, inputs are blank and job should run
    if: ${{ (inputs.deploy == 'true' || inputs.deploy == '') && !failure() }}
    container: google/cloud-sdk
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables_gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}
          env_file_artifact_name: ${{ inputs.env_file_artifact_name }}
      - uses: ./.github/actions/run_terraform
        with:
          targets: ${{ env.MAIN_TERRAFORM_RESOURCES }}
          workspace: ${{ env.REPOSITORY_NAME }}
          image_name: ${{ needs.get_training_images.outputs.dockerhub_image }}

  train:
    name: train
    needs:
      - get_base_project_builder_sa_key
      - get_training_images
    runs-on: neuronest-runner-set
    # If the workflow isn't called, inputs are blank and job should run
    if: ${{ (inputs.do_post_deployment == 'true' || inputs.do_post_deployment == '') && !failure() }}
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.get_training_images.outputs.dockerhub_image}}
      credentials:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    env:
      # todo: sans doute changer le model/model.pt hardcodé, on n'a pas de raison de
      # penser que cette valeur sera toujours la bonne. Le directory model est obtenu
      # via une variable d'environnement dans un environnement vertex et qui pourra
      # changer. La partie "model" du filename est une valeur par défaut du script
      # python, tout comme l'extension ".pt" qui est une valeur par défaut
      # Il suffit que vertex ou le code python ou les arguments du code python changent
      # pour que "model/model.pt" ne fonctionne plus, il vaudrait mieux trouver $
      # dynamiquement le path du model post training
      # exemple :
      #   model_gspath=$(gsutil ls -r "gs://${MODELS_BUCKET}/${PACKAGE_NAME}-${{ github.sha }}/**/*.pt")
      MODEL_WEIGHTS: model/model.pt
    outputs:
      model_gspath: ${{ steps.output_step.outputs.model_gspath }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables_gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}
          env_file_artifact_name: ${{ inputs.env_file_artifact_name }}
      - id: set_additional_variables
        run: |
          echo "MODEL_GSPATH"="gs://${MODELS_BUCKET}/${PACKAGE_NAME}-${{ github.sha }}" | tee -a $GITHUB_ENV
      - id: train
        run: |
          python -m ${PACKAGE_NAME}.cli --model-gspath $MODEL_GSPATH --actions train
        env:
          TRAINING_IMAGE_NAME: ${{ needs.get_training_images.outputs.gcp_image }}
          SERVICE_ACCOUNT_EMAIL: ${{ env.PROJECT_BUILDER_SERVICE_ACCOUNT_EMAIL }}
      # todo: il y a sûrement un premier problème de naming à corriger ici :
      # model_gspath qui devient {model_gspath}/{$model_weights} ça ne parait pas
      # logique.
      - id: output_step
        run: echo "model_gspath=$MODEL_GSPATH/$MODEL_WEIGHTS" | tee -a $GITHUB_OUTPUT

  build_test_push_serving_image:
    name: build_test_push_serving_image
    needs:
      - get_base_project_builder_sa_key
      - train
    runs-on: neuronest-runner-set
    # If the workflow isn't called, inputs are blank and job should run
    if: ${{ (inputs.do_post_deployment == 'true' || inputs.do_post_deployment == '') && !failure() }}
    outputs:
      dockerhub_serving_image_name: ${{ steps.build_test_push.outputs.dockerhub_image_name }}
      gcp_serving_image_name: ${{ steps.build_test_push.outputs.gcp_image_name }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables
        with:
          env_file_artifact_name: ${{ inputs.env_file_artifact_name }}
          as_root: true
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
      - uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}
      - id: set_additional_variables
        run: |
          echo "MODEL_PATH"="${{ env.REPOSITORY_NAME }}/model.pt" >> $GITHUB_ENV
      - id: download_model_weights
        run: gsutil cp ${{ needs.train.outputs.model_gspath }} $MODEL_PATH
      - id: build_test_push
        uses: ./.github/actions/build_test_push
        with:
          dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          target: serving
          build_arguments: --build-arg MODEL_PATH=$MODEL_PATH --build-arg REPOSITORY_NAME=${{ env.REPOSITORY_NAME }} --build-arg PACKAGE_NAME=${{ env.PACKAGE_NAME }} --build-arg MODEL_NAME=${{ env.MODEL_NAME }}
          dockerfile_path: ${{ env.DOCKERFILE_PATH }}

  model_upload:
    name: model_upload
    needs:
      - get_base_project_builder_sa_key
      - get_training_images
      - build_test_push_serving_image
    runs-on: neuronest-runner-set
    # If the workflow isn't called, inputs are blank and job should run
    if: ${{ (inputs.do_post_deployment == 'true' || inputs.do_post_deployment == '') && !failure() }}
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.get_training_images.outputs.dockerhub_image}}
      credentials:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables_gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}
          env_file_artifact_name: ${{ inputs.env_file_artifact_name }}
      - id: model_upload
        run: python -m ${PACKAGE_NAME}.cli --actions model_upload
        env:
          SERVING_IMAGE_NAME: ${{ needs.build_test_push_serving_image.outputs.gcp_serving_image_name }}
