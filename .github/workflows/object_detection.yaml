name: object_detection

on:
  push:
    branches:
      - main
      - develop
    paths:
      - .github/workflows/object_detection.yaml
      - .github/actions/run_pre_commits/**
      - .pre-commit-config.yaml
      - shared/**
      - object-detection/**
  pull_request:
    branches:
      - main
      - develop
    paths:
      - .github/workflows/object_detection.yaml
      - .github/actions/run_pre_commits/**
      - .pre-commit-config.yaml
      - shared/**
      - object-detection/**
  workflow_dispatch:

env:
  REPOSITORY_NAME: object-detection
  PACKAGE_NAME: object_detection
  MODEL_INSTANTIATOR_HOST: model-instantiator-bnuahhbzua-ew.a.run.app

jobs:
  build_test_push_training:
    name: build_test_push_training
    runs-on: ubuntu-latest
    container: google/cloud-sdk
    outputs:
      dockerhub_training_image_name: ${{ steps.build_test_push.outputs.dockerhub_image_name }}
      gcp_training_image_name: ${{ steps.build_test_push.outputs.gcp_image_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
      - id: build_test_push
        name: Build test push
        uses: ./.github/actions/build_test_push
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          repository_region: ${{ env.REGION }}
          docker_repository_name: ${{ env.DOCKER_REPOSITORY_NAME }}
          gcp_registry_name: ${{ env.GCP_REGISTRY_NAME }}
          dockerhub_username: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).username }}
          dockerhub_password: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).password }}
          target: training

  train:
    name: train
    needs:
      - build_test_push_training
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.build_test_push_training.outputs.dockerhub_training_image_name}}
      credentials:
        username: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).username }}
        password: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).password }}
    env:
      MODEL_WEIGHTS: model/model.pt
    outputs:
      model_gspath: ${{ steps.output_step.outputs.model_gspath }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - run: echo "TRAINING_IMAGE_NAME"="${{ needs.build_test_push_training.outputs.gcp_training_image_name }}" >> $GITHUB_ENV
      - run: echo "RUN_ID"="$(uuidgen)" >> $GITHUB_ENV
      - run: echo "MODEL_GSPATH"="gs://$REPOSITORY_NAME-models/$PACKAGE_NAME-$RUN_ID" >> $GITHUB_ENV
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
      - run: python -m object_detection.cli --model-gspath $MODEL_GSPATH --actions train
      - id: output_step
        run: echo "model_gspath=$MODEL_GSPATH/$MODEL_WEIGHTS" >> $GITHUB_OUTPUT

  build_test_push_serving:
    name: build_test_push_serving
    needs:
      - build_test_push_training
      - train
    runs-on: ubuntu-latest
    container: google/cloud-sdk
    env:
      MODEL_PATH: model.pt
    outputs:
      dockerhub_serving_image_name: ${{ steps.build_test_push.outputs.dockerhub_image_name }}
      gcp_serving_image_name: ${{ steps.build_test_push.outputs.gcp_image_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - run: echo "MODEL_GSPATH"="${{ needs.train.outputs.model_gspath }}" >> $GITHUB_ENV
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
      - run: gsutil cp $MODEL_GSPATH ${{ env.REPOSITORY_NAME }}/$MODEL_PATH
      - id: build_test_push
        name: Build test push
        uses: ./.github/actions/build_test_push
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          repository_region: ${{ env.REGION }}
          docker_repository_name: ${{ env.DOCKER_REPOSITORY_NAME }}
          gcp_registry_name: ${{ env.GCP_REGISTRY_NAME }}
          dockerhub_username: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).username }}
          dockerhub_password: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).password }}
          target: serving
          build_arguments: --build-arg MODEL_PATH=${{ env.REPOSITORY_NAME }}/${{ env.MODEL_PATH }}

  test_serving:
    name: test_serving
    needs:
      - build_test_push_training
      - build_test_push_serving
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.build_test_push_training.outputs.dockerhub_training_image_name}}
      credentials:
        username: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).username }}
        password: ${{ fromJSON(secrets.DOCKERHUB_LOGIN).password }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - run: echo "SERVING_IMAGE_NAME"="${{ needs.build_test_push_serving.outputs.gcp_serving_image_name }}" >> $GITHUB_ENV
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}

      - id: model_upload
        run: python -m object_detection.cli --actions model_upload

      - id: deploy
        run: python -m object_detection.cli --actions deploy
      - id: remove_last_model_version
        if: ${{ failure() && steps.deploy.conclusion == 'failure' }}
        run: python -m object_detection.cli --actions remove_last_model_version

      - id: poetry_install_with_test
        run: poetry check && poetry install --with dev

      - id: test_integration
        run: poetry run pytest -x tests/integration_tests -vv
      - id: undeploy_and_remove_last_model_version_and_redeploy
        if: ${{ failure() && steps.test_integration.conclusion == 'failure' }}
        run: python -m object_detection.cli --actions undeploy remove_last_model_version deploy
