name: object_detection

on:
  push:
    branches:
      - main
      - develop
#    paths:
#      - .github/workflows/object_detection.yaml
#      - .github/actions/**
#      - .github/variables/**
#      - .pre-commit-config.yaml
#      - shared/**
#      - object-detection/**
#  pull_request:
#    branches:
#      - main
#      - develop
#    paths:
#      - .github/workflows/object_detection.yaml
#      - .github/actions/**
#      - .github/variables/**
#      - .pre-commit-config.yaml
#      - shared/**
#      - object-detection/**
  workflow_dispatch:
  workflow_call:
    inputs:
      build:
        required: false
        type: string
        default: true
      deploy:
        required: false
        type: string
        default: true
      do_post_deployment:
        required: false
        type: string
        default: true
      base_project_builder_sa_key:
        required: false
        type: string
        default: ""
      dockerhub_training_image_name:
        required: false
        type: string
        default: ""
      gcp_training_image_name:
        required: false
        type: string
        default: ""
    outputs:
      gcp_training_image_name:
        description: "The gcp image name"
        value: ${{ jobs.get_gcp_training_image_name.outputs.value }}
      dockerhub_training_image_name:
        description: "The gcp image name"
        value: ${{ jobs.get_dockerhub_training_image_name.outputs.value }}
      base_project_builder_sa_key:
        description: "The gcp image name"
        value: ${{ jobs.get_base_project_builder_sa_key.outputs.value }}

env:
  REPOSITORY_NAME: object-detection
  PACKAGE_NAME: object_detection
  MODEL_INSTANTIATOR_HOST: model-instantiator-bnuahhbzua-ew.a.run.app

jobs:
  build_test_push_training_image:
    name: build_test_push_training_image
    runs-on: ubuntu-latest
    if: ${{ inputs.build == 'true' }}
    container: google/cloud-sdk
    outputs:
      dockerhub_training_image_name: ${{ steps.build_test_push.outputs.dockerhub_image_name }}
      gcp_training_image_name: ${{ steps.build_test_push.outputs.gcp_image_name }}
    steps:
      - uses: actions/checkout@v3
      - id: set_variables
        uses: ./.github/actions/set_variables
        with:
          repository_names: object-detection
      - id: gcloud_auth
        uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ secrets.NEURONEST_INFRASTRUCTURE_BUILDER_SERVICE_ACCOUNT }}
      - id: build_test_push
        uses: ./.github/actions/build_test_push
        with:
          dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          target: training

  get_gcp_training_image_name:
    runs-on: ubuntu-latest
    needs: build_test_push_training_image
    if: always()
    outputs:
      value: ${{ steps.get_gcp_training_image_name.outputs.gcp_training_image_name }}
    steps:
      - id: get_gcp_training_image_name
        run: |
          job_gcp_training_image_name=${{ needs.jobs.build_test_push_training_image.outputs.gcp_training_image_name }}
          input_gcp_training_image_name=${{ inputs.gcp_training_image_name }}
          echo "gcp_training_image_name=${job_gcp_training_image_name:-$input_gcp_training_image_name}" >> $GITHUB_OUTPUT

  get_dockerhub_training_image_name:
    runs-on: ubuntu-latest
    needs: build_test_push_training_image
    if: always()
    outputs:
      value: ${{ steps.get_dockerhub_training_image_name.outputs.dockerhub_training_image_name }}
    steps:
      - id: get_dockerhub_training_image_name
        run: |
          job_dockerhub_training_image_name=${{ needs.jobs.build_test_push_training_image.outputs.dockerhub_training_image_name }}
          input_dockerhub_training_image_name=${{ inputs.gcp_training_image_name }}
          echo "dockerhub_training_image_name=${job_dockerhub_training_image_name:-$input_dockerhub_training_image_name}" >> $GITHUB_OUTPUT

  deploy_with_training_image:
    name: deploy_with_training_image
    runs-on: ubuntu-latest
    needs: get_dockerhub_training_image_name
    # the documentation specifies that if only one job is skipped
    # in a series of jobs dependencies defined by the "needs: ", all subsequent jobs are
    # skipped. To allow jobs to run despite a skip in the series,
    # we use the always() condition
    # see: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds
    if: ${{ always() && inputs.deploy == 'true' }}
    container: google/cloud-sdk
    outputs:
      base_project_builder_sa_key: ${{ steps.build_test_push_deploy.outputs.base_project_builder_sa_key }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set_variables
      - uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ secrets.NEURONEST_INFRASTRUCTURE_BUILDER_SERVICE_ACCOUNT }}
      - id: base_run_terraform
        uses: ./.github/actions/run_terraform
        with:
          targets: ${{ env.BASE_TERRAFORM_RESOURCES }}
          workspace: base
      - uses: ./.github/actions/run_terraform
        with:
          targets: ${{ env.MAIN_TERRAFORM_RESOURCES }}
          workspace: ${{ env.REPOSITORY_NAME }}
          image_name: ${{ needs.jobs.get_dockerhub_training_image_name.outputs.value }}

  get_base_project_builder_sa_key:
    runs-on: ubuntu-latest
    needs: deploy_with_training_image
    if: always()
    outputs:
      value: ${{ steps.get_deploy_with_training_image.outputs.base_project_builder_sa_key }}
    steps:
      - id: get_base_project_builder_sa_key
        run: |
          job_base_project_builder_sa_key=${{ needs.jobs.deploy_with_training_image.outputs.base_project_builder_sa_key }}
          input_base_project_builder_sa_key=${{ inputs.base_project_builder_sa_key }}
          echo "base_project_builder_sa_key=${job_base_project_builder_sa_key:-$input_base_project_builder_sa_key}" >> $GITHUB_OUTPUT

  train:
    name: train
    needs:
      - get_gcp_training_image_name
      - get_dockerhub_training_image_name
      - get_base_project_builder_sa_key
    runs-on: ubuntu-latest
    if: ${{ always() && inputs.do_post_deployment == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.get_dockerhub_training_image_name.outputs.value}}
      credentials:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    env:
      MODEL_WEIGHTS: model/model.pt
    outputs:
      model_gspath: ${{ steps.output_step.outputs.model_gspath }}
    steps:
      - uses: actions/checkout@v3

      - name: display current image
        run: echo ${{needs.get_dockerhub_training_image_name.outputs.value}}

      - id: set_variables
        uses: ./.github/actions/set_variables
        with:
          repository_names: object-detection
          set_up_terraform_variables: false

      - id: set_additional_variables
        run: |
          echo "TRAINING_IMAGE_NAME"="${{ needs.get_gcp_training_image_name.outputs.value }}" >> $GITHUB_ENV
          echo "RUN_ID"="$(uuidgen)" >> $GITHUB_ENV
          echo "MODEL_GSPATH"="gs://${MODELS_BUCKET}/${PACKAGE_NAME}-${RUN_ID}" >> $GITHUB_ENV

      - id: gcloud_auth
        uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}

      - id: train
        run: |
          python -m object_detection.cli --model-gspath $MODEL_GSPATH --actions train
        env:
          SERVICE_ACCOUNT_EMAIL: ${{ env.PROJECT_BUILDER_SERVICE_ACCOUNT_EMAIL }}

      - id: output_step
        run: echo "model_gspath=$MODEL_GSPATH/$MODEL_WEIGHTS" >> $GITHUB_OUTPUT

  build_test_push_serving_image:
    name: build_test_push_serving_image
    needs:
      - get_base_project_builder_sa_key
      - train
    runs-on: ubuntu-latest
    if: ${{ always() && inputs.do_post_deployment == 'true' }}
    container: google/cloud-sdk
    env:
      MODEL_PATH: model.pt
    outputs:
      dockerhub_serving_image_name: ${{ steps.build_test_push.outputs.dockerhub_image_name }}
      gcp_serving_image_name: ${{ steps.build_test_push.outputs.gcp_image_name }}
    steps:
      - uses: actions/checkout@v3

      - id: set_variables
        uses: ./.github/actions/set_variables
        with:
          repository_names: object-detection
          set_up_terraform_variables: false

      - id: set_additional_variables
        run: |
          echo "MODEL_GSPATH"="${{ needs.train.outputs.model_gspath }}" >> $GITHUB_ENV

      - id: gcloud_auth
        uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}

      - id: download_model_weights
        run: gsutil cp $MODEL_GSPATH ${{ env.REPOSITORY_NAME }}/$MODEL_PATH

      - id: build_test_push
        uses: ./.github/actions/build_test_push
        with:
          dockerhub_username: ${{ vars.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          target: serving
          build_arguments: --build-arg MODEL_PATH=${{ env.REPOSITORY_NAME }}/${{ env.MODEL_PATH }}

  test_serving:
    name: test_serving
    needs:
      - get_dockerhub_training_image_name
      - get_base_project_builder_sa_key
      - build_test_push_serving_image
    runs-on: ubuntu-latest
    if: ${{ always() && inputs.do_post_deployment == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.get_dockerhub_training_image_name.outputs.value}}
      credentials:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v3

      - id: set_variables
        uses: ./.github/actions/set_variables
        with:
          repository_names: object-detection
          set_up_terraform_variables: false

      - id: set_additional_variables
        run: |
          echo "SERVING_IMAGE_NAME"="${{ needs.build_test_push_serving_image.outputs.gcp_serving_image_name }}" >> $GITHUB_ENV

      - id: gcloud_auth
        uses: ./.github/actions/gcloud_auth
        with:
          credentials_json: ${{ needs.get_base_project_builder_sa_key.outputs.value }}

      - id: model_upload
        run: python -m object_detection.cli --actions model_upload

      - id: deploy
        run: python -m object_detection.cli --actions deploy
      - id: remove_last_model_version
        if: ${{ failure() && steps.deploy.conclusion == 'failure' }}
        run: python -m object_detection.cli --actions remove_last_model_version

#      - id: poetry_install_with_test
#        run: poetry check && poetry install --with dev
#
#      - id: test_integration
#        run: poetry run pytest -x tests/integration_tests -vv
#      - id: undeploy_and_remove_last_model_version_and_redeploy
#        if: ${{ failure() && steps.test_integration.conclusion == 'failure' }}
#        run: python -m object_detection.cli --actions undeploy remove_last_model_version deploy
