name: object_detection

on:
  push:
    branches:
      - main
      - develop
    paths:
      - .github/workflows/object_detection.yaml
      - dockerfiles/object_detection.dockerfile
      - shared/**
      - object-detection/**
  pull_request:
    branches:
      - main
      - develop
    paths:
      - .github/workflows/object_detection.yaml
      - dockerfiles/object_detection.dockerfile
      - shared/**
      - object-detection/**
  workflow_dispatch:

env:
  REPOSITORY_NAME: object-detection
  PACKAGE_NAME: object_detection

jobs:
  build_training:
    name: build_training
    runs-on: self-hosted
    container: google/cloud-sdk
    outputs:
      TRAINING_IMAGE_NAME: ${{ steps.build_push.outputs.image_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          region: ${{ env.REGION }}
          ci_service_account: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
          google_application_credentials: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
      - id: build_push
        name: Build push
        uses: ./.github/actions/build_push
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          artifact_registry_path: ${{ env.ARTIFACT_REGISTRY_PATH }}
          target: training

  tests:
    name: tests
    needs:
      - build_training
    runs-on: self-hosted
    container:
      image: ${{needs.build_training.outputs.TRAINING_IMAGE_NAME}}
      credentials:
        username: _json_key_base64
        password: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
    steps:
      - uses: actions/checkout@v3
      - run: poetry check && poetry install --with test
        working-directory: ${{ env.REPOSITORY_NAME }}
      - name: Run linters
        uses: ./.github/actions/run_linters
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}

  train:
    name: train
    needs:
      - tests
      - build_training
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.build_training.outputs.TRAINING_IMAGE_NAME}}
      credentials:
        username: _json_key_base64
        password: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
    env:
      MODEL_WEIGHTS: model/model.pt
    outputs:
      MODEL_GSPATH: ${{ steps.output_step.outputs.MODEL_GSPATH }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - run: echo "TRAINING_IMAGE_NAME"="${{ needs.build_training.outputs.TRAINING_IMAGE_NAME }}" >> $GITHUB_ENV
      - run: echo "RUN_ID"="$(uuidgen)" >> $GITHUB_ENV
      - run: echo "MODEL_GSPATH"="gs://$REPOSITORY_NAME-models/$PACKAGE_NAME-$RUN_ID" >> $GITHUB_ENV
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          region: ${{ env.REGION }}
          ci_service_account: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
          google_application_credentials: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
      - run: ls
      - run: ls keys
      - run: python -m object_detection.cli --model-gspath $MODEL_GSPATH --actions train
      - id: output_step
        run: echo "MODEL_GSPATH=$MODEL_GSPATH/$MODEL_WEIGHTS" >> $GITHUB_OUTPUT

  build_serving:
    name: build_serving
    needs:
      - build_training
      - train
    runs-on: self-hosted
    container: google/cloud-sdk
    env:
      MODEL_PATH: model.pt
    outputs:
      SERVING_IMAGE_NAME: ${{ steps.build_push.outputs.image_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - run: echo "MODEL_GSPATH"="${{ needs.train.outputs.MODEL_GSPATH }}" >> $GITHUB_ENV
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          region: ${{ env.REGION }}
          ci_service_account: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
          google_application_credentials: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
      - run: gsutil cp $MODEL_GSPATH ${{ env.REPOSITORY_NAME }}/$MODEL_PATH
      - id: build_push
        name: Build push
        uses: ./.github/actions/build_push
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          artifact_registry_path: ${{ env.ARTIFACT_REGISTRY_PATH }}
          target: serving
          build_arguments: --build-arg MODEL_PATH=${{ env.REPOSITORY_NAME }}/${{ env.MODEL_PATH }}

  test_serving:
    name: test_serving
    needs:
      - build_training
      - build_serving
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ${{ env.REPOSITORY_NAME }}
    container:
      image: ${{needs.build_training.outputs.TRAINING_IMAGE_NAME}}
      credentials:
        username: _json_key_base64
        password: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
    steps:
      - uses: actions/checkout@v3
      - name: Set environment variables
        uses: ./.github/actions/set_variables
      - run: echo "SERVING_IMAGE_NAME"="${{ needs.build_serving.outputs.SERVING_IMAGE_NAME }}" >> $GITHUB_ENV
      - id: gcloud_auth
        name: GCP authentication
        uses: ./.github/actions/gcloud_auth
        with:
          repository_name: ${{ env.REPOSITORY_NAME }}
          region: ${{ env.REGION }}
          ci_service_account: ${{ secrets.OBJECT_DETECTION_CI_SERVICE_ACCOUNT }}
          google_application_credentials: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
      - run: python -m object_detection.cli --actions model_upload
      - run: python -m object_detection.cli --actions deploy || (python -m object_detection.cli --actions remove_last_model_version && exit 1)
      - run: poetry check && poetry install --with test
      - run: poetry run pytest -x tests/test_integration.py -vv || (python -m object_detection.cli --actions undeploy remove_last_model_version deploy && exit 1)
